{
  "name": "node-named",
  "description": "DNS server library for node.js",
  "version": "0.0.1",
  "author": {
    "name": "trevoro",
    "email": "trevoro@gmail.com"
  },
  "contributors": [
    {
      "name": "Mark Cavage"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/trevoro/node-named.git"
  },
  "main": "lib/index.js",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "bunyan": "0.7.0",
    "ipaddr.js": "0.1.1"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "readme": "# node-named - DNS Server in Node.js\n\nNode-named is a lightweight DNS server written in pure javascript. It has\nlimited support for the DNS spec, but aims to implement all of the *common*\nfunctionality that is in use today. \n\n\n\n## Creating a DNS Server\n\n    var named = require('./lib/index');\n    var server = named.createServer();\n\n    server.listen(9999, '127.0.0.1', function() {\n      console.log('DNS server started on port 9999');\n    });\n\n    server.on('query', function(query) {\n      var domain = query.name();\n      console.log('DNS Query: %s', domain)\n      var target = new SoaRecord(domain, {serial: 12345});\n      query.addAnswer(domain, target, 'SOA');\n      server.send(query);\n    });\n\n## Creating DNS Records\n\nnode-named provides helper functions for creating DNS records. \nThe records are available under 'named.record.NAME' where NAME is one\nof ['A', 'AAAA', 'CNAME', 'SOA', 'MX', 'TXT, 'SRV']. It is important to \nremember that these DNS records are not permanently added to the server. \nThey only exist fo the length of the particular request. After that, they are\ndestroyed. This means you have to create your own lookup mechanism.\n\n    var named = require('node-named');\n    \n    var soaRecord = named.SoaRecord('example.com', {serial: 201205150000});\n    console.log(soaRecord);\n\n### Supported Record Types\n\nThe following record types are supported\n\n * A (ipv4)\n * AAAA (ipv6)\n * CNAME (aliases)\n * SOA (start of authority)\n * MX (mail server records)\n * TXT (arbitrary text entries)\n * SRV (service discovery)\n\n## Logging\n\nnode-named uses [http://github.com/trentm/node-bunyan](bunyan) for logging.\nIt's a lot nicer to use if you npm install bunyan and put the bunyan tool in\nyour path. Otherwise, you will end up with JSON formatted log output by default.\n\n### Replacing the default logger\n\nYou can pass in an alternate logger if you wish. If you do not, then it will use\nbunyan by default. Your logger must expose the functions 'info', 'debug',\n'warn', 'trace', 'error', and 'notice'.\n\n### TODO\n\n * Better record validation\n * Create DNS client for query recursor\n * Add support for PTR records\n * Add support for TCP AXFR requests\n\n## Tell me even more...\n\nWhen DNS was designed it was designed prior\nto the web existing, so many of the features in the RFC are either never used,\nor were never implemented. This server aims to be RFC compliant, but does not\nimplement any other protocol other than INET (the one we're all used to), and\nonly supports a handful of record types (the ones that are in use on a regular\nbasis).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trevoro/node-named/issues"
  },
  "homepage": "https://github.com/trevoro/node-named",
  "_id": "node-named@0.0.1",
  "_from": "node-named@"
}
